console.log("--------------------") //1 task 

  
console.log("Ожидание..."); //этот код выполнися сразу
function doLater(callback) { //колбек в качестве аргумента
    setTimeout(() => { //сделана задержка на 2 секунды по прошествию которых появится тот самый колбек с надписью выполнено
      callback("Выполнено!"); 
    }, 2000);
  }
  
  doLater(function(result) { //вызов функции doLater и передается в качестве анон. функции колбек
    console.log(result); //Анон функция принимает результат колбека и выводит в консоль
});


console.log("--------------------") //2 task 


console.log('A');

setTimeout(() => console.log('B'), 0); //Отправляет колбек в очередь таймеров. Они ниже по приоритету, чем микрозадачи

Promise.resolve().then(() => console.log('C'));//Отправляет колбек в очередь микрозадач. Они выше по приоритету, чем таймеры 
//Список приоритетов: 1. Синхронный код, 2. Микрозадачи, 3. Таймеры, ...

console.log("--------------------") //3 task 


function fetchData(url) { // Функция, возвращающая Promise
    return new Promise((ok, fail) => { // Создаем Promise, (ok - resolve, fail - reject)
      setTimeout(() => { // Имитируем асинхронную операцию, чтобы код не зависал
        Math.random() < 0.8 ? // Генерируем случайное число и проверяем, меньше ли оно 0.8 (80% вероятность)
          ok("Успех!") : // Если меньше, вызываем resolve с сообщением "Успех!"
          fail("Ошибка!"); // Если больше, вызываем reject с сообщением "Ошибка!"
      }, 1000); // Задержка в 1 секунду (1000 миллисекунд)
    });
  }
  
  fetchData("url") // Вызываем функцию fetchData
    .then(data => console.log("Успех:", data)) // Если Promise завершился успешно (resolve), выводим сообщение с данными
    .catch(err => console.error("Ошибка:", err)); // Если Promise завершился с ошибкой (reject), выводим сообщение об ошибке
  